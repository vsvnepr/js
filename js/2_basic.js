/* Скрипт подключаем в HTML перед закрывающим тегом </body>

VS Code многострочный коммент: Ctrl + Shift + /, у кого-то Alt + Shift + A
Если нужно найти любой хоткей (комбинацию клавиш), используйте Ctrl + Shift + P - показать все команды, откроется строка поиска и введите туда название нужной команды.

Вот список команд, которые я использую в VS Code:
Строчной коммент: Ctrl+/
Блочный коммент: Ctrl+Shift+/

Дубль строки: Shift+Alt+стрелка вниз или стрелка вверх
Поменять строки местами: Alt+стрелка вниз или стрелка вверх
Многострочное редкатирование: Alt + клик по нужным местам строк мышкой

Перейти к строке с конкретным номером: Ctrl+G
Перейти к парной скобке: Ctrl+Shift+\
Поиск по файлу: Ctrl+F
Поиск по папке: Ctrl+Shift+F
Быстрое открытие конкретного файла: Сtrl+P

Переименовать переменную везде: F2
Перейти к объявлению переменной (быстрый поиск места объявления переменная): F12

Навести порядок (форматирование файл): Shift+Alt+F
Включить/выключить перенос слов: Alt+Z
*/

/*
//2.3 
'use strict'; //-  как я понял ввели в новом языке, он ограничивает синтаксис, если этой записи нет, то идет совместимость со старым языком.

//2.4 Переменные
//Имя переменной должно содержать только буквы, цифры или символы $ и _. Первый символ не должен быть цифрой. Регистр имеет значение.
var name = 'Viachaslau' // устаревшая запись VAR, переменную можно изменить ниже
let age = 28 // определяем переменную и присваиваем ей значение
age = 29 // переменные let можно изменять
let hello = 'Hello world!';
let message;
message = hello; // копируем значение 'Hello world' из переменной hello в переменную message

const lastName = 'Nepryakhin' // такая переменная CONST в дальнейшем может использоваться только для чтения
const COLOR_RED = "#F00"; // константа которая известна до выполнения, и трудно запоминается пишется заглавными и с _

//2.5 Типы данных
// Есть 8 основных типов данных

let message1 = "hello"; // Переменная в JavaScript может содержать любые данные. В один момент там может быть строка, а в другой – число:
message1 = 123456; // Языки программирования, в которых такое возможно, называются «динамически типизированными».

let n = 123; // 2.5.1(number) Числовой тип данных 
n = 12.345; 
// Специальные числовые значения
// Infinity, больше любого числа. Мы можем получить его в результате деления на ноль 
// NaN - означает вычислительную ошибку. К примеру поделить текст на число. Если где-то в математическом выражении есть NaN, то результатом вычислений с его участием будет NaN.

// 2.5.2 (BigInt)
const bigInt = 1234567890123456789012345678901234567890n; // символ "n" в конце означает, что это BigInt

// 2.5.3 (string) Строка в JavaScript должна быть заключена в кавычки.
let str = "Привет";
let str2 = 'Одинарные кавычки тоже подойдут';
let phrase = `Обратные кавычки позволяют встраивать переменные ${str} и встраивать выражения ${5-2}`;
console.log(phrase)

// 2.5.4 Булевый тип (boolean) может принимать только два значения: true (истина) и false (ложь).
let nameFieldChecked = true; // да, поле отмечено
let ageFieldChecked = false; // нет, поле не отмечено

// Булевые значения также могут быть результатом сравнений:
let isGreater = 4 > 1;

// 2.5.5 null Специальное значение которое представляет собой «ничего», «пусто» или «значение неизвестно».
// 2.5.6 undefined Оно означает, что «значение не было присвоено». Если переменная объявлена, но ей не присвоено никакого значения. Используется для проверок, была ли переменная назначена.
// 2.5.7 object Тип (объект) – хранят коллекции данных или более сложные структуры.
// 2.5.8 symbol Тип (символ) используется для создания уникальных идентификаторов в объектах. 

// Оператор typeof возвращает тип аргумента Синтаксис оператора: typeof x. Синтаксис функции: typeof(x).
typeof null // "object"  - ошибка с древна в языке.

//2.6 Взаимодействие: alert, prompt, confirm
// alert('Модальное окно') //- Она показывает сообщение и ждёт, пока пользователь нажмёт кнопку «ОК». Модальное окно - это когда пользователь не может взаимодействовать с другими элементами
const result = prompt('Promt window', ['значение по умолчанию, необязательный элемент']) // Квадратные скобки в синтаксисе [...] означают, что параметр факультативный, необязательный.
console.log(`Result Promt window: ${result}`)

const Boss = confirm('You this Boss?') // показывает сообщение и ждёт, пока пользователь нажмёт OK или Отмена. Возвращает true, если нажата OK, и false, если нажата кнопка «Отмена» или Esc с клавиатуры.
console.log(`Result Confirm window: ${Boss}`)


// Строковое преобразование
let value = true
alert(typeof value) // boolean
value = String('24') // преобразуем boolean в cтроку
alert(typeof value) // string

// Численное преобразование
console.log(typeof('6'/'2')) // происходит в математических функциях и выражениях. Например, когда операция деления / применяется не к числу:
let str = '010693'
let num = Number(str) //10693 ПОТЕРЯЛИ 0
console.log(typeof(num), num)
console.log(typeof(Number(' 99 ')), Number(' 99 ')) //99
console.log(typeof(Number('123z')), Number('123z')) //NaN
console.log(typeof(Number(true)), Number(true)) //1
console.log(typeof(Number(false)), Number(false)) //0
console.log(typeof(Number(null)), Number(null)) //0
console.log(typeof(Number(undefined)), Number(undefined)) //NaN
// Логическое преобразование
console.log(typeof(Boolean(undefined)), Boolean(undefined)) //false которые интуитивно «пустые», вроде 0, пустой строки, null, undefined и NaN, становятся false.
console.log(typeof(Boolean('0')), Boolean('0')) // true т.к. это не пустая строка

//2.8 Базовые операторы, математика
// Операнд – то, к чему применяется оператор. Например, в умножении 5 * 2 есть два операнда: левый операнд равен 5, а правый операнд равен 2. Иногда их называют «аргументами» вместо «операндов».

// Унарным называется оператор, который применяется к одному операнду. Например, оператор унарный минус "-" меняет знак числа на противоположный:
let x = -x;  // -1, применили унарный минус
alert( 5 % 2 ); // 1, остаток от деления 5 на 2
alert( 2 ** 3 ); // 8  (2 * 2 * 2, 3 раза) Возведение в степень **
alert( 4 ** (1/2) ); // 2 (степень 1/2 эквивалентна взятию квадратного корня)
alert( '13' + 2 ); // "132" если хотя бы один операнд является строкой, то второй будет также преобразован в строку.
alert(2 + 2 + '1' ); // будет "41", а не "221"
alert( 6 - '2' ); // 4, '2' приводится к числу

let y = -2;
alert( +y ); // -2 // Унарный плюс приводит к числу и Не влияет на числа

alert( +true ); // 1 // Преобразует не числа в числа
alert( +"" );   // 0 // Преобразует не числа в числа
alert( +apples + +oranges );  // оба операнда предварительно преобразованы в числа

let a = 1;
let b = 2;
let c = 3 - (a = b + 1);
alert( a ); // 3
alert( c ); // 0

let n = 2;
n += 5; // теперь n = 7 (работает как n = n + 5)
alert(n)

n *= 3 + 5;
alert( n ); // 56  (сначала выполнится правая часть, выражение идентично n *= 8)

// Инкремент ++ увеличивает переменную на 1:
let counter = 2;
counter++;        // постфиксная запись работает как counter = counter + 1, просто запись короче
alert( counter ); // 3

alert( 2 * ++counter ); // 8  приоритет выше, чем у большинства других арифметических операций.

// Оператор «запятая» предоставляет нам возможность вычислять несколько выражений, разделяя их запятой ,. Каждое выражение выполняется, но возвращается результат только последнего.
let a = (1 + 2, 3 + 4); // у запятой приоритет меньше =, поэтому если убрать скобки то результат будет 3
alert( a ); // 7 (результат вычисления 3 + 4)

let a = 1, b = 1;

let c = ++a; // a=2 c=2
let d = b++; // b=2 d=1

"" + 1 + 0 = "10" // Сложение со строкой "" + 1 преобразует 1 к строке: "" + 1 = "1", и в следующем случае "1" + 0 работает то же самое правило.
"" - 1 + 0 = -1 // Вычитание - (как и большинство математических операторов) работает только с числами, пустая строка "" приводится к 0.
"  -9  " + 5 = "  -9  5" // Сложение со строкой превращает число 5 в строку и добавляет к строке.
"  -9  " - 5 = -14 // Вычитание всегда преобразует к числу, значит строка " -9 " становится числом -9 (пробелы по краям обрезаются).
undefined + 1 = NaN // undefined становится NaN после численного преобразования.
" \t \n" - 2 = -2 // Пробельные символы, такие как \t и \n, по краям строки игнорируются при преобразовании в число, так что строка " \t \n", аналогично пустой строке, становится 0 после численного преобразования.

// 2.9 Операторы сравнения
// Все операторы сравнения возвращают значение логического типа: true false
// строки сравниваются посимвольно.
alert( 'Я' > 'А' ); // true
alert( 'Коты' > 'Кода' ); // true
alert( 'Сонный' > 'Сон' ); // true
// При сравнении значений разных типов JavaScript приводит каждое из них к числу.
alert( '2' > 1 ); // true, строка '2' становится числом 2 
alert( '01' == 1 ); // true, строка '01' становится числом 1

5 > 4 → true
"ананас" > "яблоко" → false
"2" > "12" → true
undefined == null → true
undefined === null → false
null == "\n0\n" → false
null === +"\n0\n" → false

// 2.10 Инструкция «if»
let year = prompt('В каком году была опубликована спецификация ECMAScript-2015?', '');
if (year == 2015) alert( 'Вы правы!' ); //если результат true, то выполняет блок кода.
// Если более одной инструкции, то нужно заключить блок кода в фигурные скобки:
if (year == 2015) {
    alert( "Правильно!" );  
    alert( "Вы такой умный!" );
  } else if (year>2015) { // Иногда, нужно проверить несколько вариантов условия
      alert('Многовато') 
  } else {
      alert('Маленькое значение') //необязательный блок «else» («иначе»). Он выполняется, когда условие ложно.
  }

let result = условие ? значение1 : значение2; //тернарный оператор ?
let accessAllowed = (age > 18) ? true : false  // Сначала вычисляется условие: если оно истинно, тогда возвращается значение1, в противном случае – значение2.

// Задания:
const officialName = prompt('Какое официальное название JavaScript', 'Введи сюда ответ')
if (officialName=='ECMAScript') {
    alert('Verno!')
}  else {
    alert('Ne znaete? ECMAScript?')
}

let value = prompt('Введите число: ', 'Пример: 3')
if (value>0) {
    alert(1)
} else if (value<0){
    alert(-1)
} else alert(0)

let result
result = (a + b < 4) ? alert('Мало') : alert('Много')

let message = (login == 'Сотрудник') ? 'Привет' :
  (login == 'Директор') ? 'Здравствуйте' :
  (login == '') ? 'Нет логина' :
  ';'


// 2.11 Логические операторы 
|| && операторы короткого замыкания
let hour = 12;
let isWeekend = true;
if (hour < 10 || hour > 18 || isWeekend) { //  || (ИЛИ) находит первое истинное значение слева направо. Значение возвращается в исходном виде
  alert( 'Офис закрыт.' ); // это выходной
} 


// «&&» находит первое ложное значение, возвращает первое ложное значение, а ИЛИ –  первое истинное.
alert( 1 && 2 && 3 ); // 3 // Когда все значения верны, возвращается последнее
// Если первый операнд ложный,
// И возвращает его. Второй операнд игнорируется
alert( null && 5 ); // null

// ! (НЕ) Сначала приводит аргумент к логическому типу true/false. Затем возвращает противоположное значение. В частности, двойное НЕ !! используют для преобразования значений к логическому типу:
alert( !!"non-empty string" ); // true

alert( alert(1) || 2 || alert(3) ); // 1 2 Вызов alert не возвращает значения, или, иначе говоря, возвращает undefined.
alert( null || 2 && 3 || 4 ); // 3 Приоритет оператора && выше, чем ||, поэтому он выполнится первым.

let userName = prompt("Кто там?", '');

if (userName == 'Админ') {

  let pass = prompt('Пароль?', '');

  if (pass == 'Я главный') {
    alert( 'Здравствуйте!' );
  } else if (pass == '' || pass == null) {
    alert( 'Отменено' );
  } else {
    alert( 'Неверный пароль' );
  }

} else if (userName == '' || userName == null) {
  alert( 'Отменено' );
} else {
  alert( "Я вас не знаю" );
}

//2.12 Оператор объединения с null '??'
let user;
alert(user ?? "Аноним"); //user пока undefined. ?? возвращает первый аргумент, если он не null/undefined, иначе второй
user = 'slava'
alert(user ?? "Аноним"); //«определено», если оно отличается от null или undefined.

let firstName = null;
let lastName = null;
let nickName = "Суперкодер";
// показывает первое определённое значение:
alert(firstName ?? lastName ?? nickName ?? "Аноним"); // Суперкодер
// || возвращает первое истинное значение.
// ?? возвращает первое определённое значение.
let height = 0;
alert(height || 100); // 100
alert(height ?? 100); // 0

let height = null;
let width = null;
let area = (height ?? 100) * (width ?? 50); // важно: используйте круглые скобки
alert(area); // 5000

// 2.13 Циклы while и for
let i = 3;
while (i) { // когда i будет равно 0, условие станет ложным, и цикл остановится
  alert( i );
  i--;
}
// Цикл «do…while»
let i = 0;
do {
  alert( i );
  i++;
} while (i < 3);
// Цикл «for»
for (начало; условие; шаг) {
    // ... тело цикла ...
  }

for (let i = 0; i < 3; i++) { // выведет 0, затем 1, затем 2
    alert(i);
  }

//   Любая часть for может быть пропущена.
let i = 0;
for (; i < 3;) { // Можно убрать и шаг
  alert( i++ );
}

// Прерывание цикла: «break»
let sum = 0;

while (true) {
  let value = +prompt("Введите число", '');
  if (!value) break; // Директива break полностью прекращает выполнение цикла и передаёт управление на строку за его телом, то есть на alert
  sum += value;
}
alert( 'Сумма: ' + sum );
//«бесконечный цикл + break» – отличная штука для тех ситуаций, когда условие, по которому нужно прерваться, находится не в начале или конце цикла, а посередине

// Переход к следующей итерации: continue
for (let i = 0; i < 10; i++) {
    if (i % 2 == 0) continue;     // если true, пропустить оставшуюся часть тела цикла
    alert(i); // 1, затем 3, 5, 7, 9
  }

for (i=2; i<=10; i+=2) {
    console.log(i)
}

let i=0
while (i<3) {
    alert(`number ${i}!`)
    i++
}
*/
// https://learn.javascript.ru/while-for#povtoryat-tsikl-poka-vvod-neveren




// if (value >100) {
//   alert('All good')
// } else {
//   alert('All bad') 
// }
for (var i=0; i<100;){
    value = prompt('Введите число больше 100','')
    i=value
}
alert('All good')